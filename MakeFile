export

# Setup Go Variables
GOPATH := $(shell go env GOPATH)
GOBIN := $(PWD)/bin
ifneq ($(GOPRIVATE),)
	GOPRIVATE:= $(GOPRIVATE),
endif
GOPRIVATE := $(GOPRIVATE)github.com/density

# Invoke shell with new path to enable access to bin
PATH := $(GOBIN):$(PATH)
#SHELL := env PATH=$(PATH) bash

# Setup Project Variables
GIT_REF := $(shell git rev-parse --short=7 HEAD)
VERSION ?= commit-$(GIT_REF)
SERVICE_NAME := bhuvan-backend

# Setup GCP Registry Variables
GCR_PROJECT := bhuvan-backend
REGISTRY := 083947760274.dkr.ecr.ap-south-1.amazonaws.com/bhuvan-backend
IMAGE := $(REGISTRY):$(VERSION)
LATEST :=latest
LATEST_IMAGE := $(REGISTRY):$(LATEST)

DOCKER_FILE_SERVER := "docker/server/Dockerfile"
# Other Variables
REVIEWDOG_ARG ?= -diff="git diff master"
UNIT_TEST_PACKAGES=$(shell go list ./... | grep -v ginkgo | grep -v '/scripts' | tr '\n' ', ' | sed 's/.$$//')

.PHONY: dependencies
dependencies:
	@./scripts/dependencies.sh

.PHONY: lint
lint:
	golangci-lint run $(args)  --skip-files '^errors' --skip-files 'generated_data.go$$' --skip-files 'test.go$$' --skip-files 'generated_data_lint.go$$' ./...
	go-consistent $(cons_args) ./...

.PHONY: lint-fix
lint-fix:
	@make lint args='--fix -v' cons_args='-v'

.PHONY: build
build:
	go build -v  \
      -ldflags "-X main.version=$(VERSION) -X main.serviceName=$(SERVICE_NAME)" \
      ./cmd/server


.PHONY: test
test:
	go clean -testcache
	go test $(args) -race  $(shell go list ./... )

.PHONY: test-long
test-long:
	go clean -testcache
	go test -v -race -count=1 -timeout=4m -coverpkg=$(UNIT_TEST_PACKAGES) -coverprofile=coverage.txt.tmp  $(shell go list ./... )
	cat coverage.txt.tmp | grep -v yo | grep -v cmd  | grep -v mock > coverage.txt
	go tool cover -func=coverage.txt

.PHONY: ginkgo-test-long
ginkgo-test-long:
	go test ./ginkgo -race -cover

.PHONY: proto
proto:
	protoc app/*/proto/*.proto --go_out=proto

.PHONY: check-coverage
COVERAGE_TARGET=80
check-coverage:
	@go tool cover -func=coverage.txt | grep total | awk '{ print $$3 }' | sed -e 's/%//g' > coverage.total.txt
	@echo Total coverage is `cat coverage.total.txt`%. If below $(COVERAGE_TARGET)% it will fail. Run make test coverage-report to check missing coverage.
	@export cov=`cat coverage.total.txt` && cov_pass=`echo $$cov '>=' $(COVERAGE_TARGET).0 | bc -l` && test $$cov_pass -eq 1

.PHONY: coverage-report
coverage-report:
	go tool cover -html=coverage.txt

.PHONY: run
run:
	. .envrc.sample && go run cmd/main.go

.PHONY: run-aws-db
run-aws-db:
	. .envrc.sampleOnline && go run cmd/server/main.go

.PHONY: run-worker
run-worker:
	. .envrc.sample && go run cmd/worker/main.go

.PHONY: run-container
run-container:
	@docker run --env-file docker-env.txt -p 8080:8080 $(IMAGE)

.PHONY: fmt
fmt:
	@find . -iname "*.go" -not -path "./vendor/**" | xargs gofmt -s -w

.PHONY: reviewdog
reviewdog:
	reviewdog -conf=.reviewdog.yml $(REVIEWDOG_ARG)

.PHONY: container
container:
	@docker build -t $(IMAGE) \
    		--build-arg VERSION=$(VERSION) \
    		--build-arg SERVICE_NAME=$(SERVICE_NAME) \
    		-f $(DOCKER_FILE_SERVER) \
    		.


.PHONY: get-ecr-credentials
get-ecr-credentials:
	aws ecr get-login-password | docker login --username AWS --password-stdin 083947760274.dkr.ecr.ap-south-1.amazonaws.com

.PHONY: docker-push
docker-push:
	docker push $(IMAGE)
	docker tag $(IMAGE) $(LATEST_IMAGE)
	docker push $(LATEST_IMAGE)

docker-run-local:
	docker run -p 8080:8080 --env-file docker-env.txt 083947760274.dkr.ecr.ap-south-1.amazonaws.com/density-api:latest


.PHONY: db-dump-local
db-dump-local:
	docker exec -t postgres_container pg_dumpall --clean --username density  --database density > db_dump/dump_local.sql


.phony: db-import-local
db-import-local:
	cat db_dump/dump_local.sql | docker exec -i postgres_container psql -U density



.PHONY: generate-ent
generate-ent:
	go run -mod=mod entgo.io/ent/cmd/ent generate ./ent/schema
# --feature sql/modifier --feature sql/upsert

.PHONY: swagger
swagger:
	 swag init -g api/http.go --exclude api/admin,api/admin_user,api/admin_auth

.PHONY: swagger-admin
swagger-admin:
	 swag init -g ../../api/admin_http.go --output docs/admin --dir api/admin,api/admin_user,api/admin_auth,pkg,api/fiat --exclude api
.phony: uuid
uuid:
	@uuidgen | awk '{print tolower($0)}'

.PHONY: run-admin
run-admin:
	. .envrc.sample && go run cmd/admin/main.go


.PHONY: tunnel-mongodb-dev
tunnel-mongodb-dev:
	. .envrc.sample && ssh -i "~/Documents/bhuvan-mongodb-dev.pem" -NL 9000:localhost:27017 bitnami@ec2-13-233-111-225.ap-south-1.compute.amazonaws.com -v

.PHONY: tunnel-prod
tunnel-prod:
	. .envrc.sample && ssh -i "~/.ssh/jump.pem" -NL 8886:${RDS_HOST_PROD} ubuntu@${EC2_IP_PROD} -v

.PHONY: tunnel-demo
tunnel-demo:
	. .envrc.sample && ssh -i "~/.ssh/jump.pem" -NL 8887:${RDS_HOST_DEMO} ubuntu@${EC2_IP_PROD} -v
